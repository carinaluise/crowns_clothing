{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { convertCollectionsSnapshotToMap, firestore } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap(snapshot));\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}","map":{"version":3,"sources":["/Users/carinarobinson/Desktop/React_Developer_Course/E-commerce/crown_clothing/src/redux/shop/shop.saga.js"],"names":["takeLatest","call","put","ShopActionTypes","convertCollectionsSnapshotToMap","firestore","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsStart","FETCH_COLLECTIONS_START","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,QAAoC,oBAApC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,+BAAR,EAAyCC,SAAzC,QAAyD,+BAAzD;AACA,SAAQC,uBAAR,EAAiCC,uBAAjC,QAA+D,gBAA/D;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMR,UAAU,CAACG,eAAe,CAACM,uBAAjB,EAA0CC,qBAA1C,CAAhB;AACH;AAED,OAAO,UAAUA,qBAAV,GAAiC;AAEpC,MAAI;AAEA,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAAEG,+BAA+B,CAACS,QAAD,CAAjC,CAAjC;AAEA,UAAMX,GAAG,CAACI,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AAGH,GATD,CASE,OAAMC,KAAN,EAAY;AAEV,UAAMd,GAAG,CAACK,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AACJ","sourcesContent":["import {takeLatest, call, put} from 'redux-saga/effects'\nimport ShopActionTypes from './shop.types';\nimport {convertCollectionsSnapshotToMap, firestore} from '../../firebase/firebase.utils';\nimport {fetchCollectionsSuccess, fetchCollectionsFailure} from './shop.actions';\n\nexport function* fetchCollectionsStart(){\n    yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync)\n}\n\nexport function* fetchCollectionsAsync(){\n\n    try { \n\n        const collectionRef = firestore.collection('collections');\n        const snapshot = yield collectionRef.get()\n        const collectionsMap = yield call (convertCollectionsSnapshotToMap(snapshot));\n\n        yield put(fetchCollectionsSuccess(collectionsMap))\n\n        \n    } catch(error){\n\n        yield put(fetchCollectionsFailure(error.message))\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}