{"ast":null,"code":"import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfile, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure } from './user.actions';\nimport { userActionTypes } from './user.types';\nexport function* getSnapShotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfile, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail); // SECOND PARAMETER RECEIVES PAYLAD FROM EMAIL_SIG_IN_START_ACTION\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  // GETS WHOLE ACTION THAT WE TAKE FROM TAKE LATEST ON ONEMAILSIGINSTART PASSED INTO THE FUNCTION\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECKUSERSESSION, isUserAuthenticated);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/Users/carinarobinson/Desktop/React_Developer_Course/E-commerce/crown_clothing/src/redux/user/user.saga.js"],"names":["all","call","put","takeLatest","auth","googleProvider","createUserProfile","getCurrentUser","signInSuccess","signInFailure","userActionTypes","getSnapShotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onCheckUserSession","CHECKUSERSESSION","isUserAuthenticated","userSagas"],"mappings":"AACA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,UAAxB,QAAyC,oBAAzC;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,iBAA/B,EAAkDC,cAAlD,QAAuE,+BAAvE;AACA,SAAQC,aAAR,EAAuBC,aAAvB,QAA2C,gBAA3C;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAC9C,MAAI;AAEJ,UAAMC,OAAO,GAAG,MAAMZ,IAAI,CAAEK,iBAAF,EAAqBM,QAArB,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AAEA,UAAMb,GAAG,CAAEM,aAAa,CAAC;AAAEQ,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAf,CAAT;AACC,GAND,CAME,OAAMC,KAAN,EAAY;AACd,UAAMhB,GAAG,CAACO,aAAa,CAACS,KAAD,CAAd,CAAT;AACC;AAEJ;AAGD,OAAO,UAAUC,gBAAV,GAA4B;AAE/B,MAAI;AAEA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMhB,IAAI,CAACiB,eAAL,CAAqBhB,cAArB,CAArB;AACAM,IAAAA,uBAAuB,CAACS,IAAD,CAAvB;AAGH,GAND,CAME,OAAOF,KAAP,EAAc;AAChB,UAAMhB,GAAG,CAACO,aAAa,CAACS,KAAD,CAAd,CAAT;AACC;AAEJ;AAED,OAAO,UAAUI,mBAAV,GAA+B;AAClC,QAAMnB,UAAU,CAACO,eAAe,CAACa,oBAAjB,EAAuCJ,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUK,kBAAV,GAA8B;AACjC,QAAMrB,UAAU,CAACO,eAAe,CAACe,mBAAjB,EAAsCC,eAAtC,CAAhB,CADiC,CACsC;AAC1E;AAED,OAAO,UAAUA,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAA1B,EAAuD;AAAE;AAE5D,MAAI;AAEA,UAAM;AAACT,MAAAA;AAAD,QAAS,MAAMhB,IAAI,CAAC0B,0BAAL,CAAgCF,KAAhC,EAAwCC,QAAxC,CAArB;AACAlB,IAAAA,uBAAuB,CAACS,IAAD,CAAvB;AAEH,GALD,CAKE,OAAMF,KAAN,EAAa;AACZ,UAAMhB,GAAG,CAAEO,aAAa,CAACS,KAAD,CAAf,CAAT;AACF;AAGJ;AAED,OAAO,UAAUa,kBAAV,GAAgC;AAEnC,QAAM5B,UAAU,CAAEO,eAAe,CAACsB,gBAAlB,EAAoCC,mBAApC,CAAhB;AAEH;AAED,OAAO,UAAUA,mBAAV,GAAiC;AACpC,MAAI;AACA,UAAMrB,QAAQ,GAAG,MAAML,cAAc,EAArC;AACA,QAAI,CAACK,QAAL,EAAe;AACf,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AAEH,GALD,CAKE,OAAMM,KAAN,EAAa;AAEf,UAAMhB,GAAG,CAACO,aAAa,CAACS,KAAD,CAAd,CAAT;AAEC;AACJ;AAGD,OAAO,UAAUgB,SAAV,GAAqB;AACxB,QAAMlC,GAAG,CAAE,CAACC,IAAI,CAACqB,mBAAD,CAAL,EAA6BrB,IAAI,CAACuB,kBAAD,CAAjC,EAAuDvB,IAAI,CAAC8B,kBAAD,CAA3D,CAAF,CAAT;AACH","sourcesContent":["\nimport {all, call, put, takeLatest} from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfile, getCurrentUser} from '../../firebase/firebase.utils' \nimport {signInSuccess, signInFailure} from './user.actions';\nimport { userActionTypes } from './user.types';\n\nexport function* getSnapShotFromUserAuth(userAuth){\n    try {\n    \n    const userRef = yield call (createUserProfile, userAuth)\n    const userSnapshot = yield userRef.get();\n\n    yield put (signInSuccess({ id: userSnapshot.id, ...userSnapshot.data()}))\n    } catch(error){\n    yield put(signInFailure(error))\n    }\n    \n}\n\n\nexport function* signInWithGoogle(){\n\n    try {\n\n        const {user} = yield auth.signInWithPopup(googleProvider);\n        getSnapShotFromUserAuth(user);\n       \n\n    } catch (error) {\n    yield put(signInFailure(error))\n    }\n\n}\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail) // SECOND PARAMETER RECEIVES PAYLAD FROM EMAIL_SIG_IN_START_ACTION\n}\n\nexport function* signInWithEmail({payload: {email, password}}){ // GETS WHOLE ACTION THAT WE TAKE FROM TAKE LATEST ON ONEMAILSIGINSTART PASSED INTO THE FUNCTION\n\n    try {\n\n        const {user} = yield auth.signInWithEmailAndPassword(email , password)\n        getSnapShotFromUserAuth(user);\n\n    } catch(error) {\n       yield put (signInFailure(error))\n    }\n\n\n}\n\nexport function* onCheckUserSession () {\n\n    yield takeLatest (userActionTypes.CHECKUSERSESSION, isUserAuthenticated)\n    \n}\n    \nexport function* isUserAuthenticated () {\n    try {\n        const userAuth = yield getCurrentUser();\n        if (!userAuth) return;\n        yield getSnapShotFromUserAuth(userAuth) \n\n    } catch(error) {\n\n    yield put(signInFailure(error));\n    \n    }\n}\n\n\nexport function* userSagas(){\n    yield all ([call(onGoogleSignInStart) , call(onEmailSignInStart), call(onCheckUserSession)])\n}\n\n"]},"metadata":{},"sourceType":"module"}