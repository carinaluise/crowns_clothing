{"ast":null,"code":"import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfile, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure } from './user.actions';\nimport { userActionTypes } from './user.types';\nexport function* getSnapShotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfile, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail); // SECOND PARAMETER RECEIVES PAYLAD FROM EMAIL_SIG_IN_START_ACTION\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  // GETS WHOLE ACTION THAT WE TAKE FROM TAKE LATEST ON ONEMAILSIGINSTART PASSED INTO THE FUNCTION\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onSignOutStart() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["/Users/carinarobinson/Desktop/React_Developer_Course/E-commerce/crown_clothing/src/redux/user/user.saga.js"],"names":["all","call","put","takeLatest","auth","googleProvider","createUserProfile","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","userActionTypes","getSnapShotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onCheckUserSession","CHECK_USER_SESSION","isUserAuthenticated","onSignOutStart","SIGN_OUT_START","signOut","userSagas"],"mappings":"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","sourcesContent":["\nimport {all, call, put, takeLatest} from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfile, getCurrentUser} from '../../firebase/firebase.utils' \nimport {signInSuccess, signInFailure, signOutSuccess, signOutFailure} from './user.actions';\nimport { userActionTypes } from './user.types';\n\nexport function* getSnapShotFromUserAuth(userAuth, additionalData){\n    try {\n    \n    const userRef = yield call (createUserProfile, userAuth, additionalData)\n    const userSnapshot = yield userRef.get();\n    yield put (signInSuccess({ id: userSnapshot.id, ...userSnapshot.data()}))\n    } catch(error){\n    yield put(signInFailure(error))\n    }\n    \n}\n\nexport function* signInWithGoogle(){\n\n    try {\n\n        const {user} = yield auth.signInWithPopup(googleProvider);\n        yield getSnapShotFromUserAuth(user);\n       \n\n    } catch (error) {\n    yield put(signInFailure(error))\n    }\n\n}\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail) // SECOND PARAMETER RECEIVES PAYLAD FROM EMAIL_SIG_IN_START_ACTION\n}\n\nexport function* signInWithEmail({payload: {email, password}}){ // GETS WHOLE ACTION THAT WE TAKE FROM TAKE LATEST ON ONEMAILSIGINSTART PASSED INTO THE FUNCTION\n\n    try {\n\n        const {user} = yield auth.signInWithEmailAndPassword(email , password)\n        yield getSnapShotFromUserAuth(user);\n\n    } catch(error) {\n       yield put (signInFailure(error))\n    }\n\n\n}\n\nexport function* onCheckUserSession () {\n\n    yield takeLatest (userActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n    \n}\n    \nexport function* isUserAuthenticated () {\n    try {\n        const userAuth = yield getCurrentUser();\n        if (!userAuth) return;\n        yield getSnapShotFromUserAuth(userAuth) \n\n    } catch(error) {\n\n    yield put(signInFailure(error));\n    \n    }\n}\n\nexport function* onSignOutStart() {\n\tyield takeLatest (userActionTypes.SIGN_OUT_START, signOut)\n}\n\nexport function* signOut() {\n\ttry {\n        yield auth.signOut();\n        yield put(signOutSuccess())\n}   catch(error) {\n    yield put(signOutFailure(error))}\n}    \n\n\n\nexport function* userSagas(){\n    yield all ([call(onGoogleSignInStart) , call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)])\n}\n\n"]},"metadata":{},"sourceType":"module"}