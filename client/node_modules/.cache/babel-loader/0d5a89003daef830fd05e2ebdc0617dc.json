{"ast":null,"code":"import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfile, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nimport { userActionTypes } from './user.types';\nexport function* getSnapShotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfile, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail); // SECOND PARAMETER RECEIVES PAYLAD FROM EMAIL_SIG_IN_START_ACTION\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  // GETS WHOLE ACTION THAT WE TAKE FROM TAKE LATEST ON ONEMAILSIGINSTART PASSED INTO THE FUNCTION\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onSignOutStart() {\n  yield takeLatest(userActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(userActionTypes.SIGN_UP_START, signUp);\n}\nexport function* signUp({\n  displayName,\n  email,\n  password,\n  confirmPassword\n}) {\n  console.log(email);\n\n  if (password !== confirmPassword) {\n    alert(\"passwords don't match\");\n    return;\n  }\n\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield createUserProfile(user, {\n      displayName\n    });\n    yield put(signUpSuccess(user));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart)]);\n}","map":{"version":3,"sources":["/Users/carinarobinson/Desktop/React_Developer_Course/E-commerce/crown_clothing/src/redux/user/user.saga.js"],"names":["all","call","put","takeLatest","auth","googleProvider","createUserProfile","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","userActionTypes","getSnapShotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onCheckUserSession","CHECK_USER_SESSION","isUserAuthenticated","onSignOutStart","SIGN_OUT_START","signOut","onSignUpStart","SIGN_UP_START","signUp","displayName","confirmPassword","console","log","alert","createUserWithEmailAndPassword","userSagas"],"mappings":"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","sourcesContent":["\nimport {all, call, put, takeLatest} from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfile, getCurrentUser} from '../../firebase/firebase.utils' \nimport {signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure} from './user.actions';\nimport { userActionTypes } from './user.types';\n\nexport function* getSnapShotFromUserAuth(userAuth, additionalData){\n    try {\n    \n    const userRef = yield call (createUserProfile, userAuth, additionalData)\n    const userSnapshot = yield userRef.get();\n    yield put (signInSuccess({ id: userSnapshot.id, ...userSnapshot.data()}))\n    } catch(error){\n    yield put(signInFailure(error))\n    }\n    \n}\n\nexport function* signInWithGoogle(){\n\n    try {\n\n        const {user} = yield auth.signInWithPopup(googleProvider);\n        yield getSnapShotFromUserAuth(user);\n       \n\n    } catch (error) {\n    yield put(signInFailure(error))\n    }\n\n}\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail) // SECOND PARAMETER RECEIVES PAYLAD FROM EMAIL_SIG_IN_START_ACTION\n}\n\nexport function* signInWithEmail({payload: {email, password}}){ // GETS WHOLE ACTION THAT WE TAKE FROM TAKE LATEST ON ONEMAILSIGINSTART PASSED INTO THE FUNCTION\n\n    try {\n\n        const {user} = yield auth.signInWithEmailAndPassword(email , password)\n        yield getSnapShotFromUserAuth(user);\n\n    } catch(error) {\n       yield put (signInFailure(error))\n    }\n\n\n}\n\nexport function* onCheckUserSession () {\n\n    yield takeLatest (userActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n    \n}\n    \nexport function* isUserAuthenticated () {\n    try {\n        const userAuth = yield getCurrentUser();\n        if (!userAuth) return;\n        yield getSnapShotFromUserAuth(userAuth) \n\n    } catch(error) {\n\n    yield put(signInFailure(error));\n    \n    }\n}\n\nexport function* onSignOutStart() {\n\tyield takeLatest (userActionTypes.SIGN_OUT_START, signOut)\n}\n\nexport function* signOut() {\n\ttry {\n        yield auth.signOut();\n        yield put(signOutSuccess())\n}   catch(error) {\n    yield put(signOutFailure(error))}\n}    \n\nexport function* onSignUpStart(){\n    yield takeLatest(userActionTypes.SIGN_UP_START, signUp)\n}\n\nexport function* signUp ({displayName, email, password, confirmPassword}){\n\n    console.log(email)\n    if(password !== confirmPassword){\n        alert(\"passwords don't match\")\n        return; \n    }\n      \n   try {\n\n        const {user} = yield auth.createUserWithEmailAndPassword(email, password);\n       \n        yield createUserProfile(user, {displayName})\n\n        yield put(signUpSuccess(user));\n\n\n   } catch (error) {\n        \n        yield put(signUpFailure(error))\n\n    }\n}\n\n\n\nexport function* userSagas(){\n    yield all ([call(onGoogleSignInStart) , call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart)])\n}\n\n"]},"metadata":{},"sourceType":"module"}